#include <EEPROM.h>
// Function to write a string to EEPROM
void writeStringToEEPROM(int addrOffset, const String &strToWrite) {
  byte len = strToWrite.length();
  EEPROM.write(addrOffset, len);
  for (int i = 0; i < len; i++) {
    EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
  }
}
// Function to read a string from EEPROM
String readStringFromEEPROM(int addrOffset) {
  int newStrLen = EEPROM.read(addrOffset);
  char data[newStrLen + 1];
  for (int i = 0; i < newStrLen; i++) {
    data[i] = EEPROM.read(addrOffset + 1 + i);
  }
  data[newStrLen] = '\0';
  return String(data);
}
void setup() {
  // Initialize EEPROM with initial values
  writeStringToEEPROM(110, "0");
  writeStringToEEPROM(120, "123456");
  writeStringToEEPROM(140, "+959799447661");
  writeStringToEEPROM(160, "+959778865138");
}

void loop() {
  }


This program is the main program for Prepaid Smart Energy Metering.
#include <EEPROM.h>
#include <SoftwareSerial.h>

// Define a SoftwareSerial object named 'gsm' with RX pin 9 and TX pin 10
SoftwareSerial gsm(9, 10);

// Include the LiquidCrystal_I2C library and create an LCD object named 'lcd'
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Define variables for managing time intervals
unsigned long previousTime = millis();
unsigned long timeInterval = 20;
unsigned long previousTime1 = millis();
unsigned long timeInterval1 = 100;

// Define String variables for storing SMS-related information
String responseData, senderNumber, actual_sms, userPhone, OperatorPh, total_unit_str, pulse_str;
unsigned long randNumber;

// Define variables for SMS verification codes and generated codes
String code1, code2, code3, code4, code5, code6;
String gen_code1, gen_code2, gen_code3, gen_code4, gen_code5, gen_code6;

// Define a variable for storing billing information
String bill;

// Define variables for managing electricity consumption and pricing
int total_unit;
unsigned long price = 0;
int unitPrice = 100;
int flag1 = 0, flag2 = 0;



void setup() {
  // Write data to EEPROM at specific addresses
  writeStringToEEPROM(120, "420144");          
// Store a string ("420144") in EEPROM at address 120
  writeStringToEEPROM(140, "+959974892150");   
// Store a string ("+959974892150") in EEPROM at address 140
  writeStringToEEPROM(160, "+959799447661"); 
  // Store a string ("+959799447661") in EEPROM at address 160

  // Reserve space in memory for the 'responseData' string
  responseData.reserve(128);

  // Initialize serial communication with a baud rate of 9600
  Serial.begin(9600);

  // Call a function to initialize GSM communication
  gsmbegin();

  // Call a function to initialize the GSM module
  gsm_init();

  // Initialize the LCD display
  lcd.init();

  // Turn on the backlight of the LCD display
  lcd.backlight();

  // Read total_unit value from EEPROM and convert it to an integer
  total_unit_str = readStringFromEEPROM(110);
  total_unit = total_unit_str.toInt();

  // Read password (pswd) from EEPROM
  pswd = readStringFromEEPROM(120);

  // Set up the initial display on the LCD
  lcd.setCursor(0, 0);
  lcd.print("  Prepaid Smart   ");
  lcd.setCursor(0, 1);
  lcd.print("  Energy Meter  ");
}
void loop() {
  // Function to get phone number information
  phoneGetting();

  // Read total_unit value from EEPROM and convert it to an integer
  total_unit_str = readStringFromEEPROM(110);
  total_unit = total_unit_str.toInt();

  // Calculate the total price based on the total_unit and unitPrice
  price = total_unit * unitPrice;

  // Get the current time
  unsigned long currentTime = millis();

  // Check if the total_unit is 2 and flag1 is not set
  if (total_unit == 2 && flag1 == 0) {
    // Send a low balance warning message and set flag1
    send_message(userPhone, "Your balance is low! Please fill the bill!");
    flag1 = 1;
  }

  // Check if the total_unit is 0 and flag2 is not set
  if (total_unit == 0 && flag2 == 0) {
    // Send an empty balance warning message, turn off relay, and set flag2
    send_message(userPhone, "Your balance is empty! Please fill the bill!");
    digitalWrite(relay, LOW);
    flag2 = 1;
  }

  // Check if the total_unit is greater than 2
  if (total_unit > 2) {
    // Turn on relay and reset flags
    digitalWrite(relay, HIGH);
    flag1 = 0;
    flag2 = 0;
  }

  // Check if the specified time interval has passed
  if ((currentTime - previousTime) >= timeInterval) {
    // Check if there is available data from the GSM module
    if (gsm.available() > 0) {
      // Read the response data from the GSM module until a newline character
      responseData = gsm.readStringUntil("\n");
      delay(1000);
      Serial.println(responseData);

      // Parse the received SMS data
      parse();
      delay(1000);

      // Extract the initial portion of the received SMS for specific actions
      String bill_search = actual_sms.substring(0, 4);
      String pswd_search = actual_sms.substring(0, 5);

      // Check if the received SMS is "generate" from the operator phone
      if (actual_sms == "generate" && senderNumber == OperatorPh) {
        // Generate a random code and send it to the user
        random_generate();
        code_sent_EPC();
        Serial.println(F("Code sent to message"));
      }

      // Check if the received SMS is "check bill" from the user phone
      if (actual_sms == "check bill" && senderNumber == userPhone) {
        // Read total_unit from EEPROM, calculate the price, and send the balance
        total_unit_str = readStringFromEEPROM(110);
        total_unit = total_unit_str.toInt();
        price = total_unit * unitPrice;
        send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        Serial.println(F("Check bill message sent completed"));
      }
    }

    // Update previousTime for the next iteration
    previousTime = currentTime;
  }
}
      if (bill_search == "bill" && senderNumber == userPhone) {
    // If the SMS contains "bill" and is from the userPhone

      // Call a function to retrieve a billing code
        codeGetting();
        delay(1000);

        // Extract the bill amount from the SMS
        bill = actual_sms.substring(actual_sms.indexOf("bill") + 4, actual_sms.lastIndexOf('*'));

        // Check if the extracted bill matches one of the predefined billing codes
        if (bill == code1) {

// Update total_unit, store in EEPROM, turn on relay, update balance, and send a confirmation SMS
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          total_unit = total_unit + 10;
          EEPROM.write(110, total_unit);
          writeStringToEEPROM(110, String(total_unit));
          digitalWrite(relay, HIGH);
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          price = total_unit * unitPrice;
          writeStringToEEPROM(0, "******");
          send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        }
        else if (bill == code2) {
// Update total_unit, store in EEPROM, turn on relay, update balance, and send a confirmation SMS

          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          total_unit = total_unit + 10;
          EEPROM.write(110, total_unit);
          writeStringToEEPROM(110, String(total_unit));
          digitalWrite(relay, HIGH);
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          price = total_unit * unitPrice;
          writeStringToEEPROM(10, "******");
          send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        }
        else if (bill == code3) {
// Update total_unit, store in EEPROM, turn on relay, update balance, and send a confirmation SMS

          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          total_unit = total_unit + 10;
          EEPROM.write(110, total_unit);
          writeStringToEEPROM(110, String(total_unit));
          digitalWrite(relay, HIGH);
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          price = total_unit * unitPrice;
          writeStringToEEPROM(20, "******");
          send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        }
        else if (bill == code4) {
// Update total_unit, store in EEPROM, turn on relay, update balance, and send a confirmation SMS

          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          total_unit = total_unit + 20;
          EEPROM.write(110, total_unit);
          writeStringToEEPROM(110, String(total_unit));
          digitalWrite(relay, HIGH);
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          price = total_unit * unitPrice;
          writeStringToEEPROM(30, "******");
          send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        }
        else if (bill == code5) {
// Update total_unit, store in EEPROM, turn on relay, update balance, and send a confirmation SMS

          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          total_unit = total_unit + 20;
          EEPROM.write(110, total_unit);
          writeStringToEEPROM(110, String(total_unit));
          digitalWrite(relay, HIGH);
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          price = total_unit * unitPrice;
          writeStringToEEPROM(40, "******");
          send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        }
        else if (bill == code6) {
// Update total_unit, store in EEPROM, turn on relay, update balance, and send a confirmation SMS

          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          total_unit = total_unit + 20;
          EEPROM.write(110, total_unit);
          writeStringToEEPROM(110, String(total_unit));
          digitalWrite(relay, HIGH);
          total_unit_str = readStringFromEEPROM(110);
          total_unit = total_unit_str.toInt();
          price = total_unit * unitPrice;
          writeStringToEEPROM(50, "******");
          send_message(userPhone, "Your balance is " + String(price) + "Ks.");
        }
        else {

// If the received billing code doesn't match any of the predefined codes, send an error message
          send_message(userPhone, "Wrong Bill Code!");
        }
      }
    }
  }
}

void parse() {
  // Check if the response data contains the string "CMT:"
  if (responseData.indexOf("CMT:") > 0) {
    // Extract the sender's phone number from the response data
    senderNumber = responseData.substring(responseData.indexOf("+CMT: ") + 7, responseData.indexOf("+CMT: ") + 20);
  }

  // Check if the response data contains the string "CMT:"
  if (responseData.indexOf("CMT:") > 0) {
    // Find the last occurrence of double quotes in the response data
    int m = 1 + responseData.lastIndexOf('"');
    int n = responseData.length();

    // Extract the actual SMS content from the response data
    actual_sms = responseData.substring(responseData.indexOf("+CMT: ") + m, responseData.indexOf("+CMT: ") + n - 4);

    // Turn on the LCD backlight, display an SMS received message, wait for 2 seconds, and clear the LCD
    lcd.backlight();
    lcd.setCursor(0, 1);
    lcd.print("  SMS Received  ");
    delay(2000);
    lcd.clear();
  }
}
void send_message(String phoneno, String message) {
  // Set SMS mode to text mode (AT+CMGF=1)
  gsm.println("AT+CMGF=1");
  delay(500);

  // Specify the recipient phone number (AT+CMGS="phoneno")
  gsm.print("AT+CMGS=\"");
  gsm.print(phoneno);
  gsm.println("\"\r");
  delay(500);

  // Send the SMS message
  gsm.print(message);
  delay(100);

  // Send the CTRL+Z character to indicate the end of the message
  gsm.println((char)26);
  delay(500);

  // Display a confirmation message on the LCD
  lcd.setCursor(0, 1);
  lcd.print("SMS Sending Done");
  delay(2000);
  
  // Clear the LCD display
  lcd.clear();
}

void phoneGetting() {
  // Read the user's phone number from EEPROM and store it in the variable userPhone
  userPhone = readStringFromEEPROM(140);


  // Read the operator's phone number from EEPROM and store it in the variable OperatorPh
  OperatorPh = readStringFromEEPROM(160);
}
void gsmbegin() {
  // Initialize serial communication with the GSM module at a baud rate of 9600
  gsm.begin(9600);

  // Set the timeout for GSM module communication to 1000 milliseconds
  gsm.setTimeout(1000);

  // Send AT command to check the communication with the GSM module
  delay(100);
  gsm.println("AT\r");

  // Disable command echo in the GSM module (ATE0)
  delay(100);
  gsm.println("ATE0\r");

  // Set the baud rate of the GSM module to 9600 (AT+IPR=9600)
  delay(100);
  gsm.println("AT+IPR=9600\r");

  // Set the SMS message format to text mode (AT+CMGF=1)
  delay(100);
  gsm.println("AT+CMGF=1\r");

  // Configure new message indications to be routed to the GSM module's serial interface (AT+CNMI)
  delay(100);
  gsm.println("AT+CNMI=2,2,0,0,0\r");

  // Enable the presentation of the incoming caller's phone number in the CLI (AT+CLIP=1)
  delay(100);
  gsm.println("AT+CLIP=1\r\n");

  
// Delete all SMS messages stored in the GSM module (AT+CMGDA="DEL ALL")
  delay(100);
  gsm.println("AT+CMGDA=\"DEL ALL\"\r");
  delay(100);
}
void gsm_init() {
  // Flag to control the while loop for AT command checks
  boolean at_flag = 1;

  // Continue sending AT commands until successful response is received
  while (at_flag) {
    // Send AT command to the GSM module
    gsm.println("AT");

    // Check for responses from the GSM module
    while (gsm.available() > 0) {
      // If "OK" is found in the response, update LCD and set flag to exit the loop
      if (gsm.find("OK")) {
        lcd.setCursor(0, 0);
        lcd.print("Finding Network.");
        Serial.println(F("Finding Network."));
        at_flag = 0;
      }
    }

    // Delay for 1000 milliseconds before the next AT command
    delay(1000);
  }

  // Display success message on the LCD and Serial monitor
  lcd.setCursor(0, 0);
  lcd.print(" GSM Connected! ");
  Serial.println(F("Mobile Network Connected"));
  delay(1000);
}

void code_sent_EPC() {
  // Set SMS mode to text mode (AT+CMGF=1)
  gsm.println("AT+CMGF=1");
  delay(500);

  // Specify the recipient phone number (AT+CMGS="OperatorPh")
  gsm.print("AT+CMGS=\"");
  gsm.print(OperatorPh);
  gsm.println("\"\r");
  delay(500);

  // Send the first set of randomly generated codes
  gsm.println("1000Ks numbers are");
  gsm.println(gen_code1);
  gsm.println(gen_code2);
  gsm.println(gen_code3);
  delay(100);

  // Send the CTRL+Z character to indicate the end of the message
  gsm.println((char)26);
  delay(500);

  // Display a confirmation message on the LCD
  lcd.setCursor(0, 1);
  lcd.print("SMS Sending Done");
  delay(3000);

  // Clear the LCD display
  lcd.clear();

  // Repeat the process for the second set of randomly generated codes

  // Set SMS mode to text mode (AT+CMGF=1)
  gsm.println("AT+CMGF=1");
  delay(500);

  // Specify the recipient phone number (AT+CMGS="OperatorPh")
  gsm.print("AT+CMGS=\"");
  gsm.print(OperatorPh);
  gsm.println("\"\r");
  delay(500);

  // Send the second set of randomly generated codes
  gsm.println("2000Ks numbers are");
  gsm.println(gen_code4);
  gsm.println(gen_code5);
  gsm.println(gen_code6);
  delay(100);

  // Send the CTRL+Z character to indicate the end of the message
  gsm.println((char)26);
  delay(500);

  // Display a confirmation message on the LCD
  lcd.setCursor(0, 1);
  lcd.print("SMS Sending Done");
  delay(2000);

  // Clear the LCD display
  lcd.clear();
}

void random_generate() {
  // Generate and assign a random 6-digit number to gen_code1
  randNumber = random(100000, 999999);
  gen_code1 = randNumber;
  Serial.print(F("Code 1 = "));
  Serial.println(gen_code1);

  // Repeat the process for gen_code2 to gen_code6
  randNumber = random(100000, 999999);
  gen_code2 = randNumber;
  Serial.print(F("Code 2 = "));
  Serial.println(gen_code2);

  randNumber = random(100000, 999999);
  gen_code3 = randNumber;
  Serial.print(F("Code 3 = "));
  Serial.println(gen_code3);

  randNumber = random(100000, 999999);
  gen_code4 = randNumber;
  Serial.print(F("Code 4 = "));
  Serial.println(gen_code4);

  randNumber = random(100000, 999999);
  gen_code5 = randNumber;
  Serial.print(F("Code 5 = "));
  Serial.println(gen_code5);

  randNumber = random(100000, 999999);
  gen_code6 = randNumber;
  Serial.print(F("Code 6 = "));
  Serial.println(gen_code6);

  // Write the generated codes to specific EEPROM addresses
  writeStringToEEPROM(0, gen_code1);
  writeStringToEEPROM(10, gen_code2);
  writeStringToEEPROM(20, gen_code3);
  writeStringToEEPROM(30, gen_code4);
  writeStringToEEPROM(40, gen_code5);
  writeStringToEEPROM(50, gen_code6);
}

void codeGetting() {
  // Retrieve the code from EEPROM addresses and assign to corresponding variables
  code1 = readStringFromEEPROM(0);
  code2 = readStringFromEEPROM(10);
  code3 = readStringFromEEPROM(20);
  code4 = readStringFromEEPROM(30);
  code5 = readStringFromEEPROM(40);
  code6 = readStringFromEEPROM(50);
}

void writeStringToEEPROM(int addrOffset, const String &strToWrite) {
  // Get the length of the string to be written
  byte len = strToWrite.length();

  // Write the length of the string at the specified EEPROM address
  EEPROM.write(addrOffset, len);

  // Write each character of the string to consecutive EEPROM addresses
  for (int i = 0; i < len; i++) {
    EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
  }
}
void writeStringToEEPROM(int addrOffset, const String &strToWrite) {
  // Get the length of the string to be written
  byte len = strToWrite.length();

  // Write the length of the string at the specified EEPROM address
  EEPROM.write(addrOffset, len);

  // Write each character of the string to consecutive EEPROM addresses
  for (int i = 0; i < len; i++) {
    EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
  }
}
